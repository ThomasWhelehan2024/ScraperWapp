@page "/rankings"
@using ScraperWapp.BackEnd.Models
@using ScraperWapp.Data
@using ScraperWapp.Data.DTOS
@using ScraperWapp.Orchestrators
@inject DdgOrchestrator DdgOrchestrator

<PageTitle>Search Results</PageTitle>

<h1>Web Scraper</h1>
<p>View where <strong>infotrack.co.uk</strong> appears in the top 100 DuckDuckGo results for "land registry searches software" for today, along with all top 100 results and their type of result.</p>

@if (rankings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <h4>InfoTrack Rankings</h4>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>@nameof(RankingModel.Rank)</th>
                    <th>@nameof(RankingModel.Url)</th>
                    <th>@nameof(RankingModel.Type)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var rank in rankings.Where(r => r.Url.Contains("infotrack.co.uk", StringComparison.OrdinalIgnoreCase)))
                {
                    <tr>
                        <td>@rank.Rank</td>
                        <td>@rank.Url</td>
                        <th>@rank.Type</th>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="col">
            <h4>All Rankings</h4>
            <table class="table">
                <thead>
                <tr>
                    <th>@nameof(RankingModel.Rank)</th>
                    <th>@nameof(RankingModel.Url)</th>
                    <th>@nameof(RankingModel.Type)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var rank in rankings)
                {
                    <tr>
                        <td>@rank.Rank</td>
                        <td>@rank.Url</td>
                        <td>@rank.Type</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private IList<IRankingModel> rankings;

    protected override async Task OnInitializedAsync()
    {
        
        rankings = (await DdgOrchestrator.CollectResultsAsync()).OrderBy(r => r.Rank).ToList();
    }
}
